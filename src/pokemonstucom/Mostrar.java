
package pokemonstucom;

import java.awt.Component;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.Collectors;
import javax.swing.JTextField;
import pokemonstucom.Pokemon;
import pokemonstucom.PokemonAgua;
import static pokemonstucom.PokemonApp.pokemonlist;
import pokemonstucom.PokemonPlanta;
import pokemonstucom.PokemonFuego;


public class Mostrar extends javax.swing.JDialog {
    
        ArrayList<Pokemon> pokedex = new ArrayList<>();
        ArrayList<Pokemon> registrado;
        int index = 0;
        

    public Mostrar(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
       
        index = 0;
        pokemonlist.values().forEach(poke -> pokedex.add(poke));
        
        tipoAgua.setVisible(false);
        habitat.setVisible(false);
        tipoAguaLabel.setVisible(false);
        habitatLabel.setVisible(false);
        
        if (pokedex.size() == 1) {
            prev.setVisible(false);
            next.setVisible(false);
        } else {
            prev.setVisible(true);
            next.setVisible(true);
        }
        
        hideAndShow(pokedex.get(index).getClass().getSimpleName().toLowerCase(), pokedex, index);
        
        nombre.setText(pokedex.get(index).getNombre());
        ataque.setText(String.valueOf(pokedex.get(index).getAtaque()));
        defensa.setText(String.valueOf(pokedex.get(index).getDefensa()));
        ps.setText(String.valueOf(pokedex.get(index).getPs()));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listaTipo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        sliderPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        prev = new javax.swing.JButton();
        next = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        nombre = new javax.swing.JLabel();
        ataque = new javax.swing.JLabel();
        defensa = new javax.swing.JLabel();
        ps = new javax.swing.JLabel();
        tipoAguaLabel = new javax.swing.JLabel();
        tipoAgua = new javax.swing.JLabel();
        habitatLabel = new javax.swing.JLabel();
        habitat = new javax.swing.JLabel();
        tipoPokemonLabel = new javax.swing.JLabel();
        tipoPokemon = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        currentFilterText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        listaTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos los pokemon:", "Agua", "Planta", "Fuego" }));
        listaTipo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listaTipoItemStateChanged(evt);
            }
        });
        listaTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaTipoActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Mostrar Pokemons");

        sliderPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel2.setText("Ataque");

        jLabel3.setText("Defensa");

        jLabel4.setText("PS");

        prev.setText("<");
        prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevActionPerformed(evt);
            }
        });

        next.setText(">");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        jLabel1.setText("Nombre:");

        nombre.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        nombre.setText("jLabel6");

        ataque.setText("jLabel7");

        defensa.setText("jLabel8");

        ps.setText("jLabel9");

        tipoAguaLabel.setText("Tipo de agua");

        tipoAgua.setText("jLabel7");

        habitatLabel.setText("Habitat");

        habitat.setText("jLabel8");

        tipoPokemonLabel.setText("Tipo de pok√©mon");

        tipoPokemon.setText("jLabel7");

        jButton1.setText("Menu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sliderPanelLayout = new javax.swing.GroupLayout(sliderPanel);
        sliderPanel.setLayout(sliderPanelLayout);
        sliderPanelLayout.setHorizontalGroup(
            sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sliderPanelLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(sliderPanelLayout.createSequentialGroup()
                            .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2))
                            .addGap(89, 89, 89)
                            .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ataque, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(defensa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(sliderPanelLayout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addGap(120, 120, 120)
                            .addComponent(ps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(sliderPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, sliderPanelLayout.createSequentialGroup()
                        .addComponent(habitatLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(habitat, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(sliderPanelLayout.createSequentialGroup()
                        .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sliderPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(tipoPokemonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(sliderPanelLayout.createSequentialGroup()
                                .addComponent(tipoAguaLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tipoAgua, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                            .addComponent(tipoPokemon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(71, 71, 71))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sliderPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(sliderPanelLayout.createSequentialGroup()
                        .addComponent(prev)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(next)))
                .addGap(280, 280, 280))
        );
        sliderPanelLayout.setVerticalGroup(
            sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sliderPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nombre))
                .addGap(44, 44, 44)
                .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ataque)
                    .addComponent(jLabel2)
                    .addComponent(tipoPokemonLabel)
                    .addComponent(tipoPokemon))
                .addGap(18, 18, 18)
                .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(defensa)
                        .addComponent(tipoAguaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tipoAgua)))
                .addGap(18, 18, 18)
                .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ps)
                        .addComponent(habitatLabel)
                        .addComponent(habitat)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(next)
                    .addComponent(prev))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        currentFilterText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentFilterText.setText("Lista de todos los pok√©mon registrados");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(sliderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(currentFilterText, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(listaTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(listaTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(currentFilterText, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sliderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listaTipoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listaTipoItemStateChanged

        
        if (evt.getStateChange() == 1) {
            
            String currentText;
            
            switch (listaTipo.getSelectedItem().toString()) {
                case "Agua":
                    if (getFilteredArray("pokemonagua")) {
                        currentText = "No existe pokemons de Agua registrados";
                        sliderPanel.setVisible(false);
                    } else {
                        index = 0;
                        currentText = "Listado de pok√©mon tipo Agua";
                        nombre.setText(registrado.get(index).getNombre());
                        ataque.setText(String.valueOf(registrado.get(index).getAtaque()));
                        defensa.setText(String.valueOf(registrado.get(index).getDefensa()));
                        ps.setText(String.valueOf(registrado.get(index).getPs()));
                        if (registrado.get(index) instanceof PokemonAgua) {
                           PokemonAgua pokeagua = (PokemonAgua) registrado.get(index);
                           tipoAgua.setText(pokeagua.getTipoAgua());
                           tipoAguaLabel.setVisible(true);
                           tipoAgua.setVisible(true);
                           habitat.setVisible(false);
                           habitatLabel.setVisible(false);
                        }
                        
                        tipoPokemon.setText("Agua");
                        
                        if (registrado.size() == 1) {
                            prev.setVisible(false);
                            next.setVisible(false);
                        } else {
                            prev.setVisible(true);
                            next.setVisible(true);
                        }
                        sliderPanel.setVisible(true);
                    }    
                    break;
                case "Planta":
                    if (getFilteredArray("pokemonplanta")) {
                        currentText = "No existe pokemons de Planta registrados";
                        sliderPanel.setVisible(false);
                    } else {
                        index = 0;
                        currentText = "Listado de pok√©mon tipo Planta";
                        nombre.setText(registrado.get(index).getNombre());
                        ataque.setText(String.valueOf(registrado.get(index).getAtaque()));
                        defensa.setText(String.valueOf(registrado.get(index).getDefensa()));
                        ps.setText(String.valueOf(registrado.get(index).getPs()));
                        
                        if (registrado.get(index) instanceof PokemonPlanta) {
                           PokemonPlanta pokeplanta = (PokemonPlanta) registrado.get(index);
                           habitat.setText(pokeplanta.getHabitat());
                           habitatLabel.setVisible(true);
                           habitat.setVisible(true);
                           tipoAguaLabel.setVisible(false);
                           tipoAgua.setVisible(false);
                        }
                        
                        tipoPokemon.setText("Planta");
                        
                        if (registrado.size() == 1) {
                            prev.setVisible(false);
                            next.setVisible(false);
                        } else {
                            prev.setVisible(true);
                            next.setVisible(true);
                        }
                        sliderPanel.setVisible(true);
                    }
                    break;
                case "Fuego":
                    if (getFilteredArray("pokemonfuego")) {
                        currentText = "No existe pokemons de Fuego registrados";
                        sliderPanel.setVisible(false);
                    } else {
                        currentText = "Listado de pok√©mon tipo Fuego";
                        index = 0;
                        nombre.setText(registrado.get(index).getNombre());
                        ataque.setText(String.valueOf(registrado.get(index).getAtaque()));
                        defensa.setText(String.valueOf(registrado.get(index).getDefensa()));
                        ps.setText(String.valueOf(registrado.get(index).getPs()));
                        
                        habitatLabel.setVisible(false);
                        habitat.setVisible(false);
                        tipoAguaLabel.setVisible(false);
                        tipoAgua.setVisible(false);
                        
                        tipoPokemon.setText("Fuego");
                        
                        if (registrado.size() == 1) {
                            prev.setVisible(false);
                            next.setVisible(false);
                        } else {
                            prev.setVisible(true);
                            next.setVisible(true);
                        }
                        sliderPanel.setVisible(true);
                    }
                    break;
                default:
                    currentText = "Lista de todos los pok√©mon registrados";
                    index = 0;
                    hideAndShow(pokedex.get(index).getClass().getSimpleName().toLowerCase(), pokedex, index);
                    nombre.setText(pokedex.get(index).getNombre());
                    ataque.setText(String.valueOf(pokedex.get(index).getAtaque()));
                    defensa.setText(String.valueOf(pokedex.get(index).getDefensa()));
                    ps.setText(String.valueOf(pokedex.get(index).getPs()));
                    if (pokedex.size() == 1) {
                        prev.setVisible(false);
                        next.setVisible(false);
                    } else {
                        prev.setVisible(true);
                        next.setVisible(true);
                    }
                    sliderPanel.setVisible(true);
                    
            }
            currentFilterText.setText(currentText);
        }

        
    }//GEN-LAST:event_listaTipoItemStateChanged

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        if (listaTipo.getSelectedItem().equals("Todos los pokemon:")) {

            if (index < pokedex.size() - 1) {
                index++;
                
                hideAndShow(pokedex.get(index).getClass().getSimpleName().toLowerCase(), pokedex, index);
                
                nombre.setText(pokedex.get(index).getNombre());
                ataque.setText(String.valueOf(pokedex.get(index).getAtaque()));
                defensa.setText(String.valueOf(pokedex.get(index).getDefensa()));
                ps.setText(String.valueOf(pokedex.get(index).getPs()));
            }
        } else {
            if (index < registrado.size() - 1) {
                index++;
                hideAndShow(registrado.get(index).getClass().getSimpleName().toLowerCase(), registrado, index);
                
                nombre.setText(registrado.get(index).getNombre());
                ataque.setText(String.valueOf(registrado.get(index).getAtaque()));
                defensa.setText(String.valueOf(registrado.get(index).getDefensa()));
                ps.setText(String.valueOf(registrado.get(index).getPs()));
            }
        }
        
        
    }//GEN-LAST:event_nextActionPerformed

    
    private void prevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevActionPerformed
       
        if (listaTipo.getSelectedItem().equals("Todos los pokemon:")) {

            if (index > 0) {
                index--;
                
                hideAndShow(pokedex.get(index).getClass().getSimpleName().toLowerCase(), pokedex, index);
                
                nombre.setText(pokedex.get(index).getNombre());
                ataque.setText(String.valueOf(pokedex.get(index).getAtaque()));
                defensa.setText(String.valueOf(pokedex.get(index).getDefensa()));
                ps.setText(String.valueOf(pokedex.get(index).getPs()));
            }
        } else {
            if (index > 0) {
                index--;
                
                hideAndShow(registrado.get(index).getClass().getSimpleName().toLowerCase(), registrado, index);
                
                nombre.setText(registrado.get(index).getNombre());
                ataque.setText(String.valueOf(registrado.get(index).getAtaque()));
                defensa.setText(String.valueOf(registrado.get(index).getDefensa()));
                ps.setText(String.valueOf(registrado.get(index).getPs()));
            }
        }

    }//GEN-LAST:event_prevActionPerformed

    private void listaTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaTipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listaTipoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    
    public void hideAndShow(String tipo, ArrayList<Pokemon> arr, int i) {
                switch (tipo) {
                    case "pokemonagua":
                        PokemonAgua pokeagua = (PokemonAgua) arr.get(i);
                        tipoAgua.setText(pokeagua.getTipoAgua());
                        tipoAguaLabel.setVisible(true);
                        tipoAgua.setVisible(true);
                        habitat.setVisible(false);
                        habitatLabel.setVisible(false);
                        tipoPokemon.setText("Agua");
                        break;
                    case "pokemonplanta":
                        PokemonPlanta pokeplanta = (PokemonPlanta) arr.get(i);
                        habitat.setText(pokeplanta.getHabitat());
                        habitatLabel.setVisible(true);
                        habitat.setVisible(true);
                        tipoAguaLabel.setVisible(false);
                        tipoAgua.setVisible(false);
                        tipoPokemon.setText("Planta");
                        break;
                    case "pokemonfuego":
                        habitatLabel.setVisible(false);
                        habitat.setVisible(false);
                        tipoAguaLabel.setVisible(false);
                        tipoAgua.setVisible(false);
                        tipoPokemon.setText("Fuego");
                        break;
                }
    }
    
    public boolean getFilteredArray(String tipo) {
        registrado = pokedex
                .stream()
                .filter(poke -> poke.getClass().getSimpleName().toLowerCase().equals(tipo))
                .collect(Collectors.toCollection(ArrayList::new));
        return registrado.isEmpty();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mostrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mostrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mostrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mostrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Mostrar dialog = new Mostrar(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ataque;
    private javax.swing.JLabel currentFilterText;
    private javax.swing.JLabel defensa;
    private javax.swing.JLabel habitat;
    private javax.swing.JLabel habitatLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JComboBox<String> listaTipo;
    private javax.swing.JButton next;
    private javax.swing.JLabel nombre;
    private javax.swing.JButton prev;
    private javax.swing.JLabel ps;
    private javax.swing.JPanel sliderPanel;
    private javax.swing.JLabel tipoAgua;
    private javax.swing.JLabel tipoAguaLabel;
    private javax.swing.JLabel tipoPokemon;
    private javax.swing.JLabel tipoPokemonLabel;
    // End of variables declaration//GEN-END:variables
}
